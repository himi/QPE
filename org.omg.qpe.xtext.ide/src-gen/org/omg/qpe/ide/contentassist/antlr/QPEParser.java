/*
 * generated by Xtext
 */
package org.omg.qpe.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.omg.qpe.ide.contentassist.antlr.internal.InternalQPEParser;
import org.omg.qpe.services.QPEGrammarAccess;

public class QPEParser extends AbstractContentAssistParser {

	@Inject
	private QPEGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalQPEParser createParser() {
		InternalQPEParser result = new InternalQPEParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getQualifierAccess().getAlternatives_1(), "rule__Qualifier__Alternatives_1");
					put(grammarAccess.getPredicateAccess().getAlternatives(), "rule__Predicate__Alternatives");
					put(grammarAccess.getVALUEAccess().getAlternatives(), "rule__VALUE__Alternatives");
					put(grammarAccess.getQPEAccess().getGroup(), "rule__QPE__Group__0");
					put(grammarAccess.getQueryNamespaceAccess().getGroup(), "rule__QueryNamespace__Group__0");
					put(grammarAccess.getQueryNamespaceAccess().getGroup_2(), "rule__QueryNamespace__Group_2__0");
					put(grammarAccess.getPathExpressionAccess().getGroup(), "rule__PathExpression__Group__0");
					put(grammarAccess.getQueryElementAccess().getGroup(), "rule__QueryElement__Group__0");
					put(grammarAccess.getQueryElementAccess().getGroup_0(), "rule__QueryElement__Group_0__0");
					put(grammarAccess.getQueryElementAccess().getGroup_3(), "rule__QueryElement__Group_3__0");
					put(grammarAccess.getQualifierAccess().getGroup(), "rule__Qualifier__Group__0");
					put(grammarAccess.getQualifierAccess().getGroup_1_0(), "rule__Qualifier__Group_1_0__0");
					put(grammarAccess.getQualifierAccess().getGroup_1_0_1(), "rule__Qualifier__Group_1_0_1__0");
					put(grammarAccess.getQualifierAccess().getGroup_1_1(), "rule__Qualifier__Group_1_1__0");
					put(grammarAccess.getQualifierAccess().getGroup_1_1_1(), "rule__Qualifier__Group_1_1_1__0");
					put(grammarAccess.getClassifierPredicateAccess().getGroup(), "rule__ClassifierPredicate__Group__0");
					put(grammarAccess.getClassifierPredicateAccess().getGroup_0(), "rule__ClassifierPredicate__Group_0__0");
					put(grammarAccess.getAttributePredicateAccess().getGroup(), "rule__AttributePredicate__Group__0");
					put(grammarAccess.getAttributePredicateAccess().getGroup_0(), "rule__AttributePredicate__Group_0__0");
					put(grammarAccess.getReferencePredicateAccess().getGroup(), "rule__ReferencePredicate__Group__0");
					put(grammarAccess.getReferencePredicateAccess().getGroup_0(), "rule__ReferencePredicate__Group_0__0");
					put(grammarAccess.getQPEAccess().getQueryNamespacesAssignment_0(), "rule__QPE__QueryNamespacesAssignment_0");
					put(grammarAccess.getQPEAccess().getPathExpressionsAssignment_1(), "rule__QPE__PathExpressionsAssignment_1");
					put(grammarAccess.getQueryNamespaceAccess().getIRIAssignment_1(), "rule__QueryNamespace__IRIAssignment_1");
					put(grammarAccess.getQueryNamespaceAccess().getPrefixAssignment_2_1(), "rule__QueryNamespace__PrefixAssignment_2_1");
					put(grammarAccess.getPathExpressionAccess().getIsRelativeAssignment_1(), "rule__PathExpression__IsRelativeAssignment_1");
					put(grammarAccess.getPathExpressionAccess().getQualifierAssignment_2(), "rule__PathExpression__QualifierAssignment_2");
					put(grammarAccess.getPathExpressionAccess().getHeadAssignment_4(), "rule__PathExpression__HeadAssignment_4");
					put(grammarAccess.getQueryElementAccess().getQueryNamespaceAssignment_0_0(), "rule__QueryElement__QueryNamespaceAssignment_0_0");
					put(grammarAccess.getQueryElementAccess().getFeatureAssignment_1(), "rule__QueryElement__FeatureAssignment_1");
					put(grammarAccess.getQueryElementAccess().getQualifierAssignment_2(), "rule__QueryElement__QualifierAssignment_2");
					put(grammarAccess.getQueryElementAccess().getNextAssignment_3_1(), "rule__QueryElement__NextAssignment_3_1");
					put(grammarAccess.getQualifierAccess().getIndexAssignment_1_0_0(), "rule__Qualifier__IndexAssignment_1_0_0");
					put(grammarAccess.getQualifierAccess().getPredicatesAssignment_1_0_1_1(), "rule__Qualifier__PredicatesAssignment_1_0_1_1");
					put(grammarAccess.getQualifierAccess().getPredicatesAssignment_1_1_0(), "rule__Qualifier__PredicatesAssignment_1_1_0");
					put(grammarAccess.getQualifierAccess().getPredicatesAssignment_1_1_1_1(), "rule__Qualifier__PredicatesAssignment_1_1_1_1");
					put(grammarAccess.getClassifierPredicateAccess().getQueryNamespaceAssignment_0_0(), "rule__ClassifierPredicate__QueryNamespaceAssignment_0_0");
					put(grammarAccess.getClassifierPredicateAccess().getClassifierAssignment_1(), "rule__ClassifierPredicate__ClassifierAssignment_1");
					put(grammarAccess.getAttributePredicateAccess().getQueryNamespaceAssignment_0_0(), "rule__AttributePredicate__QueryNamespaceAssignment_0_0");
					put(grammarAccess.getAttributePredicateAccess().getAttributeAssignment_1(), "rule__AttributePredicate__AttributeAssignment_1");
					put(grammarAccess.getAttributePredicateAccess().getValueAssignment_3(), "rule__AttributePredicate__ValueAssignment_3");
					put(grammarAccess.getReferencePredicateAccess().getQueryNamespaceAssignment_0_0(), "rule__ReferencePredicate__QueryNamespaceAssignment_0_0");
					put(grammarAccess.getReferencePredicateAccess().getReferenceAssignment_1(), "rule__ReferencePredicate__ReferenceAssignment_1");
					put(grammarAccess.getReferencePredicateAccess().getQualifierAssignment_2(), "rule__ReferencePredicate__QualifierAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public QPEGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(QPEGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
