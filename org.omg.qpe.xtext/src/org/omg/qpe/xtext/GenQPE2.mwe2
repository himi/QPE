module org.omg.qpe.xtext.GenQPE2

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammar = "classpath:/org/omg/qpe/xtext/QPE.xtext"
var file.ext = "qpe,QPE"
var project = "org.omg.qpe.xtext"
var runtimeProject = "../${project}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        platformUri = "${runtimeProject}/.."
        registerGeneratedEPackage = "org.omg.qpe.model.ModelPackage"
        registerGenModelFile = "platform:/resource/org.omg.qpe.model/model/qpe.genmodel"
    }

    component = DirectoryCleaner {
        directory = "${runtimeProject}/src-gen"
    }

    component = Generator {
    	encoding = "UTF-8"
        pathRtProject = runtimeProject
        projectNameRt = project
        language = {
            uri = grammar
            fileExtensions = file.ext
            fragment = grammarAccess.GrammarAccessFragment {}
            fragment = ecore.EcoreGeneratorFragment {}
            fragment = serializer.SerializerFragment {}
            fragment = resourceFactory.ResourceFactoryFragment {
                fileExtensions = file.ext
            }
            fragment = parser.antlr.XtextAntlrGeneratorFragment {}
            fragment = validation.JavaValidatorFragment {
                composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
                composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            fragment = scoping.ImportURIScopingFragment {}
            fragment = scoping.ImportNamespacesScopingFragment {}
            fragment = exporting.QualifiedNamesFragment {}

            fragment = builder.BuilderIntegrationFragment {}

            fragment = generator.GeneratorFragment {
                generateMwe = false
                generateJavaMain = false
            }

            fragment = formatting.FormatterFragment {}
            fragment = labeling.LabelProviderFragment {}
            fragment = outline.OutlineTreeProviderFragment {}
            fragment = outline.QuickOutlineFragment {}
            fragment = quickfix.QuickfixProviderFragment {}
            fragment = contentAssist.JavaBasedContentAssistFragment {}
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment {}
            // fragment = junit.Junit4Fragment {}
            // fragment = types.TypesGeneratorFragment {}
            fragment = xbase.XbaseGeneratorFragment {}
            fragment = templates.CodetemplatesGeneratorFragment {}
            fragment = refactoring.RefactorElementNameFragment {}
            fragment = compare.CompareFragment {
                 fileExtensions = file.ext
            }
	}
    }

}


