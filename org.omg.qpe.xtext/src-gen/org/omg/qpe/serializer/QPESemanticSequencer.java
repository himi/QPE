/*
 * generated by Xtext
 */
package org.omg.qpe.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.omg.qpe.model.AttributePredicate;
import org.omg.qpe.model.ClassifierPredicate;
import org.omg.qpe.model.ModelPackage;
import org.omg.qpe.model.PathExpression;
import org.omg.qpe.model.QPE;
import org.omg.qpe.model.Qualifier;
import org.omg.qpe.model.QueryElement;
import org.omg.qpe.model.QueryNamespace;
import org.omg.qpe.model.ReferencePredicate;
import org.omg.qpe.services.QPEGrammarAccess;

@SuppressWarnings("all")
public class QPESemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private QPEGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ModelPackage.ATTRIBUTE_PREDICATE:
				sequence_AttributePredicate(context, (AttributePredicate) semanticObject); 
				return; 
			case ModelPackage.CLASSIFIER_PREDICATE:
				sequence_ClassifierPredicate(context, (ClassifierPredicate) semanticObject); 
				return; 
			case ModelPackage.PATH_EXPRESSION:
				sequence_PathExpression(context, (PathExpression) semanticObject); 
				return; 
			case ModelPackage.QPE:
				sequence_QPE(context, (QPE) semanticObject); 
				return; 
			case ModelPackage.QUALIFIER:
				sequence_Qualifier(context, (Qualifier) semanticObject); 
				return; 
			case ModelPackage.QUERY_ELEMENT:
				sequence_QueryElement(context, (QueryElement) semanticObject); 
				return; 
			case ModelPackage.QUERY_NAMESPACE:
				sequence_QueryNamespace(context, (QueryNamespace) semanticObject); 
				return; 
			case ModelPackage.REFERENCE_PREDICATE:
				sequence_ReferencePredicate(context, (ReferencePredicate) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Predicate returns AttributePredicate
	 *     AttributePredicate returns AttributePredicate
	 *
	 * Constraint:
	 *     (querynamespace=[QueryNamespace|ID]? attribute=[EAttribute|ID] value=VALUE)
	 */
	protected void sequence_AttributePredicate(ISerializationContext context, AttributePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns ClassifierPredicate
	 *     ClassifierPredicate returns ClassifierPredicate
	 *
	 * Constraint:
	 *     (querynamespace=[QueryNamespace|ID]? classifier=[EClassifier|ID])
	 */
	protected void sequence_ClassifierPredicate(ISerializationContext context, ClassifierPredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PathExpression returns PathExpression
	 *
	 * Constraint:
	 *     (isRelative?='.' head=QueryElement)
	 */
	protected void sequence_PathExpression(ISerializationContext context, PathExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.PATH_EXPRESSION__IS_RELATIVE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.PATH_EXPRESSION__IS_RELATIVE));
			if (transientValues.isValueTransient(semanticObject, ModelPackage.Literals.PATH_EXPRESSION__HEAD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ModelPackage.Literals.PATH_EXPRESSION__HEAD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPathExpressionAccess().getIsRelativeFullStopKeyword_0_0(), semanticObject.isIsRelative());
		feeder.accept(grammarAccess.getPathExpressionAccess().getHeadQueryElementParserRuleCall_2_0(), semanticObject.getHead());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     QPE returns QPE
	 *
	 * Constraint:
	 *     (querynamespaces+=QueryNamespace pathexpressions+=PathExpression)
	 */
	protected void sequence_QPE(ISerializationContext context, QPE semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Qualifier returns Qualifier
	 *
	 * Constraint:
	 *     (predicate+=Predicate predicate+=Predicate*)
	 */
	protected void sequence_Qualifier(ISerializationContext context, Qualifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryElement returns QueryElement
	 *
	 * Constraint:
	 *     (querynamespace=[QueryNamespace|ID]? feature=[EStructuralFeature|ID] qualifier=Qualifier? next=QueryElement?)
	 */
	protected void sequence_QueryElement(ISerializationContext context, QueryElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     QueryNamespace returns QueryNamespace
	 *
	 * Constraint:
	 *     (IRI=STRING prefix=ID?)
	 */
	protected void sequence_QueryNamespace(ISerializationContext context, QueryNamespace semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Predicate returns ReferencePredicate
	 *     ReferencePredicate returns ReferencePredicate
	 *
	 * Constraint:
	 *     (querynamespace=[QueryNamespace|ID]? reference=[EReference|ID] qualifier=Qualifier)
	 */
	protected void sequence_ReferencePredicate(ISerializationContext context, ReferencePredicate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
